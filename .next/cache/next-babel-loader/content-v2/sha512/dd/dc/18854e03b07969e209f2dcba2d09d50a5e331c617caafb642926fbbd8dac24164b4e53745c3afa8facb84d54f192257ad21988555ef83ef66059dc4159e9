{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"styles/index.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toggle/style.css\";\nimport \"highlight.js/styles/agate.css\";\nimport { SWRConfig } from \"swr\";\nimport { ThemeProvider } from \"context/theme-context\";\n\nconst fetcher = async url => {\n  const res = await fetch(url); // If the status code is not in the range 200-299,\n  // we still try to parse and throw it.\n\n  if (!res.ok) {\n    const error = new Error(\"An error occurred while fetching the data.\"); // Attach extra info to the error object.\n\n    error.info = await res.json();\n    error.status = res.status;\n    throw error;\n  }\n\n  return res.json();\n};\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsx(SWRConfig, {\n    value: {\n      refreshInterval: 3000,\n      fetcher,\n      onError: (error, key) => {\n        if (error.status !== 403 && error.status !== 404) {// We can send the error to Sentry,\n          // or show a notification UI.\n          // alert(\"Алдаа гарлаа: \");\n        }\n      }\n    },\n    children: /*#__PURE__*/_jsxs(ThemeProvider, {\n      children: [/*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps)), \";\"]\n    })\n  });\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}